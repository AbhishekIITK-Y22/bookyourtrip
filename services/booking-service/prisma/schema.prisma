generator client {
  provider = "prisma-client-js"
  output   = "./generated/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Provider {
  id          String   @id @default(cuid())
  name        String
  email       String?
  phone       String?
  description String?
  status      ProviderStatus @default(ACTIVE)
  routes      Route[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Route {
  id          String   @id @default(cuid())
  providerId  String
  source      String
  destination String
  trips       Trip[]
  provider    Provider @relation(fields: [providerId], references: [id])
}

model Trip {
  id         String  @id @default(cuid())
  routeId    String
  departure  DateTime
  capacity   Int
  basePrice  Int
  seats      Seat[]
  bookings   Booking[]
  route      Route   @relation(fields: [routeId], references: [id])
}

model Seat {
  id      String @id @default(cuid())
  tripId  String
  seatNo  String
  status  SeatStatus @default(AVAILABLE)
  trip    Trip   @relation(fields: [tripId], references: [id])

  @@unique([tripId, seatNo])
}

model Booking {
  id               String   @id @default(cuid())
  userId           String
  tripId           String
  seatNo           String
  priceApplied     Int
  state            BookingState @default(PENDING)
  paymentState     PaymentState @default(PENDING)
  idempotencyKey   String? @unique
  passengerName    String?
  passengerEmail   String?
  passengerPhone   String?
  createdAt        DateTime @default(now())
  updatedAt        DateTime @default(now()) @updatedAt
  trip             Trip     @relation(fields: [tripId], references: [id])

  @@unique([tripId, seatNo])
}

enum ProviderStatus {
  ACTIVE
  DISABLED
}

enum SeatStatus {
  AVAILABLE
  HELD
  SOLD
}

enum BookingState {
  PENDING
  CONFIRMED
  CANCELLED
  RESCHEDULED
}

enum PaymentState {
  PENDING
  PROCESSING
  PAID
  FAILED
  REFUNDED
}


